import os
import shutil
from build_config import PUBLIC_API_FILES, IGNORE_DIRS

# Check environment variable for Cython compilation
COMPILE_CYTHON = os.getenv('COMPILE_CYTHON', 'false').lower() == 'true'

def cleanup_compiled_files():
    """
    Cleans up source and intermediate files after compilation:
    - Removes .py files except __init__.py and API files (only if COMPILE_CYTHON=true)
    - Removes .c files generated by Cython
    - Removes .pyc files and __pycache__ directories
    """
    # Convert PUBLIC_API_FILES paths to absolute paths for better matching
    public_api_dirs = {path for path in PUBLIC_API_FILES if not path.endswith('.py')}
    public_api_files = {path for path in PUBLIC_API_FILES if path.endswith('.py')}

    for root, dirs, files in os.walk('.'):
        # Skip ignored directories
        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]
        
        # Remove __pycache__ directories
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            print(f"Removing {pycache_path}")
            shutil.rmtree(pycache_path)
            dirs.remove('__pycache__')

        # Skip directories that are in PUBLIC_API_FILES
        should_skip = any(root.replace('\\', '/').startswith(f"./{api_dir}") for api_dir in public_api_dirs)
        if should_skip:
            continue

        for file in files:
            filepath = os.path.join(root, file)
            # Convert to relative path with forward slashes for consistent comparison
            relative_path = filepath[2:].replace('\\', '/')  # Remove './' prefix
            
            # Only remove .py files if COMPILE_CYTHON is True
            if COMPILE_CYTHON and file.endswith('.py'):
                if (relative_path not in public_api_files and 
                    file != '__init__.py'):
                    print(f"Removing {filepath}")
                    os.remove(filepath)
            
            # Always remove Cython-generated .c files
            elif file.endswith('.c'):
                print(f"Removing {filepath}")
                os.remove(filepath)
            
            # Always remove .pyc files
            elif file.endswith('.pyc'):
                print(f"Removing {filepath}")
                os.remove(filepath)

if __name__ == '__main__':
    cleanup_compiled_files() 