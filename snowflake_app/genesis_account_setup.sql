-- can be used to build the GENESISAPP_MASTER database in a new region or provider account

/****** GENESIS MASTER DATABASE ******/

CREATE DATABASE IF NOT EXISTS GENESISAPP_MASTER;
USE DATABASE GENESISAPP_MASTER;
CREATE SCHEMA IF NOT EXISTS CODE_SCHEMA;
USE SCHEMA CODE_SCHEMA;
CREATE IMAGE REPOSITORY IF NOT EXISTS SERVICE_REPO;

-- schema/table/view used to share pre-harvested metadata with the app
CREATE SCHEMA GENESISAPP_MASTER.HARVEST_SHARE;
CREATE OR REPLACE TABLE GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS AS
SELECT * FROM GENESIS_TEST.GENESIS_NEW_JL_TEST.HARVEST_RESULTS; --TODO update source

-- Local view for sharing pre-harvested metadata. App-based shared data will have APP_NAME placeholder for database name
CREATE VIEW IF NOT EXISTS GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS_SHARED AS 
WITH shared_views AS
(SELECT SOURCE_NAME, replace(QUALIFIED_TABLE_NAME,'SPIDER_DATA','APP_NAME') QUALIFIED_TABLE_NAME, 'APP_NAME' DATABASE_NAME, MEMORY_UUID, SCHEMA_NAME, TABLE_NAME, REPLACE(COMPLETE_DESCRIPTION,'SPIDER_DATA','APP_NAME') COMPLETE_DESCRIPTION, REPLACE(DDL,'SPIDER_DATA','APP_NAME') DDL, REPLACE(DDL_SHORT,'SPIDER_DATA','APP_NAME') DDL_SHORT, 'SHARED_VIEW' DDL_HASH, REPLACE(SUMMARY,'SPIDER_DATA','APP_NAME') SUMMARY, SAMPLE_DATA_TEXT, LAST_CRAWLED_TIMESTAMP, CRAWL_STATUS, ROLE_USED_FOR_CRAWL, EMBEDDING 
    FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS
    WHERE SCHEMA_NAME in ('BASEBALL','FORMULA_1')),
local_views AS
(
SELECT SOURCE_NAME, QUALIFIED_TABLE_NAME, DATABASE_NAME, MEMORY_UUID, SCHEMA_NAME, TABLE_NAME, COMPLETE_DESCRIPTION, DDL, DDL_SHORT, 'SHARED_VIEW' DDL_HASH, SUMMARY, SAMPLE_DATA_TEXT, LAST_CRAWLED_TIMESTAMP, CRAWL_STATUS, ROLE_USED_FOR_CRAWL, EMBEDDING 
    FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS
    WHERE SCHEMA_NAME NOT in ('BASEBALL','FORMULA_1')
)
SELECT * FROM shared_views
UNION
SELECT * FROM local_views;

/****** GENESIS MASTER DATABASE ******/


/****** EVENT LOGGING SETUP - PROVIDER ******/

-- run event logging setup once for each cloud region
USE ROLE  <authorized role>;

SET REGION = (SELECT CURRENT_REGION()); -- events schema will be named after the region
SET EVENT_TABLE = 'GENESIS_EVENTS.' || $REGION || '.GENESIS_BOT_EVENTS';
SET ACCOUNT_NAME = (SELECT CURRENT_ACCOUNT_NAME());
/* create the events database/schema */
CREATE DATABASE IF NOT EXISTS GENESIS_EVENTS;

USE DATABASE GENESIS_EVENTS;
CREATE SCHEMA IF NOT EXISTS IDENTIFIER($REGION);

CREATE EVENT TABLE IDENTIFIER($EVENT_TABLE);

/* create event table and make it the events table for the account */
CREATE EVENT TABLE IDENTIFIER($EVENT_TABLE);

ALTER ACCOUNT SET EVENT_TABLE = IDENTIFIER($EVENT_TABLE);

-- use the ORGADMIN role to set the account as the events table for the cloud region 
-- run the output of this query in the main account - DSHRNXX.GENESIS https://mmb84124.snowflakecomputing.com 
SELECT 'USE ROLE ORGADMIN;\n
CALL SYSTEM$SET_EVENT_SHARING_ACCOUNT_FOR_REGION(''' || $REGION || ''', ''PUBLIC'', ''' || $ACCOUNT_NAME || ''');';

/****** EVENT LOGGING SETUP - PROVIDER ******/

create schema GENESISAPP_MASTER.APP_SHARE;

create or replace TABLE GENESISAPP_MASTER.APP_SHARE.IMAGES (
	ID NUMBER(38,0),
	IMAGE_NAME VARCHAR(16777216),
	BOT_NAME VARCHAR(16777216),
	IMAGE_DATA BINARY(8388608),
	ENCODED_IMAGE_DATA VARCHAR(16777216),
	IMAGE_DESC VARCHAR(16777216)
);

create or replace secure view GENESISAPP_MASTER.APP_SHARE.IMAGES_SHARED(
	ID,
	IMAGE_NAME,
	BOT_NAME,
	ENCODED_IMAGE_DATA,
	IMAGE_DESC
) as
SELECT ID, IMAGE_NAME, BOT_NAME, ENCODED_IMAGE_DATA, IMAGE_DESC
FROM GENESISAPP_MASTER.APP_SHARE.IMAGES;
