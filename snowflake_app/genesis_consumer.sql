


-- Open a worksheet and run the below commands, then load the Streamlit App for the application.

USE ROLE ACCOUNTADMIN;

// settings

set APP_DATABASE='GENESIS_BOTS_ALPHA'; -- The application's database, by default CEB_TEST
set APP_WAREHOUSE = 'COMPUTE_WH'; -- change to an existing Warehouse if desired

CREATE DATABASE IF NOT EXISTS GENESIS_LOCAL_DB;
CREATE SCHEMA IF NOT EXISTS GENESIS_LOCAL_DB.SETTINGS;

// WAREHOUSE

CREATE WAREHOUSE IF NOT EXISTS IDENTIFIER($APP_WAREHOUSE)
 MIN_CLUSTER_COUNT=1 MAX_CLUSTER_COUNT=1
 WAREHOUSE_SIZE=XSMALL AUTO_RESUME = TRUE AUTO_SUSPEND = 60;

GRANT USAGE ON WAREHOUSE  IDENTIFIER($APP_WAREHOUSE) TO APPLICATION  IDENTIFIER($APP_DATABASE);

// compute pool

DROP COMPUTE POOL IF EXISTS GENESIS_POOL;
CREATE COMPUTE POOL IF NOT EXISTS GENESIS_POOL FOR APPLICATION IDENTIFIER($APP_DATABASE)
 MIN_NODES=1 MAX_NODES=1 INSTANCE_FAMILY='CPU_X64_XS';

GRANT USAGE ON COMPUTE POOL GENESIS_POOL TO APPLICATION  IDENTIFIER($APP_DATABASE);
 
// network egress for openai, ngrok, slack
 
CREATE OR REPLACE NETWORK RULE GENESIS_LOCAL_DB.SETTINGS.GENESIS_RULE
 MODE = EGRESS TYPE = HOST_PORT
  VALUE_LIST = ('api.openai.com', 'connect.ngrok-agent.com:443', 'slack.com', 'api.slack.com');
  //('0.0.0.0:443','0.0.0.0:80');

CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION GENESIS_EAI
   ALLOWED_NETWORK_RULES = (GENESIS_LOCAL_DB.SETTINGS.GENESIS_RULE) ENABLED = true;

GRANT USAGE ON INTEGRATION GENESIS_EAI TO APPLICATION   IDENTIFIER($APP_DATABASE);
   
// extras for now

CREATE SECURITY INTEGRATION IF NOT EXISTS snowservices_ingress_oauth
  TYPE=oauth
  OAUTH_CLIENT=snowservices_ingress
  ENABLED=true;
  
GRANT BIND SERVICE ENDPOINT ON ACCOUNT TO APPLICATION  IDENTIFIER($APP_DATABASE); -- temporary for streamlit until st.chat works

// start (this will take 3-5 minutes)

USE DATABASE IDENTIFIER($APP_DATABASE);
CALL CORE.INITIALIZE_APP_INSTANCE('APP1','GENESIS_POOL','GENESIS_EAI',$APP_WAREHOUSE);  -- add back wait for startup

// reinitialize
call core.drop_app_instance('APP1');
CALL CORE.INITIALIZE_APP_INSTANCE('APP1','GENESIS_POOL','GENESIS_EAI',$APP_WAREHOUSE);

// pause service

call core.stop_app_instance('APP1');
alter compute pool GENESIS_POOL SUSPEND;

// resume service

alter compute pool GENESIS_POOL RESUME;
call core.start_app_instance('APP1');

// check service

USE DATABASE IDENTIFIER($APP_DATABASE);
USE SCHEMA APP1;

SELECT SYSTEM$GET_SERVICE_STATUS('GENESISAPP_SERVICE_SERVICE');
SELECT SYSTEM$GET_SERVICE_LOGS('GENESISAPP_SERVICE_SERVICE',0,'chattest',1000);

// get endpoints

SHOW ENDPOINTS IN SERVICE GENESISAPP_SERVICE_SERVICE;  --temporary

